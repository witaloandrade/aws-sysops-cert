{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Create an S3-hosted static website and deploy content from Github",
    "Parameters": {
        "RepoURL": {
            "Description": "Github repository to upload into S3",
            "Type": "String",
            "Default": "https://github.com/linuxacademy/content-aws-soa-c01/"
        },
        "RepoBranch": {
            "Description": "Github repository branch",
            "Type": "String",
            "Default": "cf-accesslogs-optimized"
        },
        "RepoSubdir": {
            "Description": "Repository subdirectory to upload to S3 (optional)",
            "Type": "String",
            "Default": ""
        }
    },
    "Resources": {
        "S3Bucket": {
            "Type": "AWS::S3::Bucket"
        },
        "LambdaDeployToS3Role": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ],
                "Policies": [
                    {
                        "PolicyName": "S3Policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:PutObject",
                                        "S3:DeleteObject"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": "arn:aws:s3:::${S3Bucket}/*"
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "DeployToS3Function": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": "import json\nimport mimetypes\nimport os\nimport threading\nimport urllib.request\nimport zipfile\nfrom urllib.parse import urlparse\n\nimport boto3\nimport cfnresponse\n\ns3 = boto3.resource('s3')\n\n\ndef lambda_handler(event, context):\n    print(json.dumps(event))\n    response_data = {}\n    response_data['Data'] = None\n\n    # Setup timer to catch timeouts\n    if(hasattr(context, 'get_remaining_time_in_millis')):\n        t = threading.Timer((context.get_remaining_time_in_millis() / 1000.00) - 0.5,\n                            timeout, args=[event, context])\n        t.start()\n    else:\n        t = threading.Timer(60, timeout, args=[event, context])\n\n    try:\n        bucket = event['ResourceProperties']['BucketName']\n        repo_subdir = event['ResourceProperties']['RepoSubdir']\n        repo_url = event['ResourceProperties']['RepoURL']\n        repo_branch = event['ResourceProperties']['RepoBranch']\n        repo_name = urlparse(repo_url).path.split('/')[-2]\n        local_file = download_repo(repo_url, repo_branch)\n        extract(local_file, '/tmp')\n        upload_to_s3(\n            bucket, f'/tmp/{repo_name}-{repo_branch}/{repo_subdir}')\n        cfnresponse.send(event, context, cfnresponse.SUCCESS,\n                        response_data, \"CustomResourcePhysicalID\")\n    except Exception as e:\n        print(\"Error: \" + str(e))\n        cfnresponse.send(event, context, cfnresponse.FAILED,\n                        response_data, \"CustomResourcePhysicalID\")\n    finally:\n        # Cancel timer before exit\n        t.cancel()\n\n# Function that executes just before lambda execution times out\n\n\ndef timeout(event, context, logger):\n    print(\"Execution is about to time out, sending failure message\")\n    cfnresponse.send(event, context, cfnresponse.FAILED,\n                    {}, \"CustomResourcePhysicalID\", reason=\"Execution timed out\")\n\n\ndef download_repo(url, repo_branch):\n    # i.e. https://github.com/linuxacademy/content-aws-soa-c01/archive/cf-accesslogs.zip\n    url += f'archive/{repo_branch}.zip'\n    print('Downloading repo: ' + url)\n    file_name = os.path.basename(url)  # i.e. cf-accesslogs.zip\n    local_file = os.path.join('/tmp', file_name)\n    urllib.request.urlretrieve(url, local_file)\n    st = os.stat(local_file)\n    print(f'Downloaded {st.st_size} bytes')\n    return local_file\n\n\ndef extract(file, target_dir):\n    print(f'Extracting {file} to {target_dir}')\n    with zipfile.ZipFile(file, \"r\") as zip:\n        zip.printdir()\n        zip.extractall(target_dir)\n\n\ndef upload_to_s3(bucket, path):\n    print(f'Uploading {path} to s3://{bucket}')\n    bucket = s3.Bucket(bucket)\n    for subdir, dirs, files in os.walk(path):\n        for file in files:\n            full_path = os.path.join(subdir, file)\n            mime_type = mimetypes.MimeTypes().guess_type(\n                full_path)[0] or 'application/octet-stream'\n            with open(full_path, 'rb') as data:\n                print(f'Uploading: {full_path} [{mime_type}]')\n                bucket.put_object(\n                    Key=full_path[len(path):], Body=data, ContentType=mime_type)\n"
                },
                "Description": "CloudFormation custom resource",
                "Handler": "index.lambda_handler",
                "Runtime": "python3.7",
                "Timeout": 60,
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaDeployToS3Role",
                        "Arn"
                    ]
                }
            }
        },
        "DeployToS3": {
            "Type": "Custom::DeployToS3",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "DeployToS3Function",
                        "Arn"
                    ]
                },
                "RepoURL": {
                    "Ref": "RepoURL"
                },
                "RepoBranch": {
                    "Ref": "RepoBranch"
                },
                "RepoSubdir": {
                    "Ref": "RepoSubdir"
                },
                "BucketName": {
                    "Ref": "S3Bucket"
                }
            }
        }
    },
    "Outputs": {
        "S3Bucket": {
            "Value": {
                "Ref": "S3Bucket"
            },
            "Description": "Name of S3 bucket to hold website content"
        }
    }
}